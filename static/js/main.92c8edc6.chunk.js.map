{"version":3,"sources":["components/NoteForm.js","components/Note.js","configs/firebase.js","components/NoteList.js","App.js","index.js"],"names":["NoteForm","props","useState","edit","value","input","setInput","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","onClick","Note","notes","completeNote","removeNote","updateNote","setEdit","console","log","map","note","index","isComplete","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","notesRef","firestore","collection","NoteList","setNotes","initializing","setInitializing","useEffect","get","then","snapshot","forEach","childSnapshot","data","push","test","add","docRef","catch","error","updatedNotes","n","find","x","doc","update","filter","delete","noteId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92c8edc6.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nfunction NoteForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  // const inputRef = useRef(null);\n\n  // useEffect(() => {\n  //   inputRef.current.focus();\n  // });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n    setInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"note-form\">\n      {props.edit ? (\n        <>\n          <input\n            placeholder=\"Update your note\"\n            value={input}\n            onChange={handleChange}\n            name=\"text\"\n            // ref={inputRef}\n            className=\"note-input edit\"\n          />\n          <button onClick={handleSubmit} className=\"note-button edit\">\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder=\"Note for Jing kbal khoch\"\n            value={input}\n            onChange={handleChange}\n            name=\"text\"\n            className=\"note-input\"\n            // ref={inputRef}\n          />\n          <button onClick={handleSubmit} className=\"note-button\">\n            Add Note\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default NoteForm;\n","import { useState } from 'react';\nimport NoteForm from './NoteForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nconst Note = ({ notes, completeNote, removeNote, updateNote }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: '',\n  });\n\n  const submitUpdate = value => {\n    updateNote(edit.id, value);\n    setEdit({\n      id: null,\n      value: '',\n    });\n  };\n\n  if (edit.id) return <NoteForm edit={edit} onSubmit={submitUpdate} />;\n\n  console.log(notes);\n\n  return notes.map((note, index) => (\n    <div\n      className={note.isComplete ? 'note-row complete' : 'note-row'}\n      key={index}\n    >\n      <div key={note.id} onClick={() => completeNote(note.id)}>\n        {note.text}\n      </div>\n      <div className=\"icons\">\n        <RiCloseCircleLine\n          onClick={() => removeNote(note.id)}\n          className=\"delete-icon\"\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: note.id, value: note.text })}\n          className=\"edit-icon\"\n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default Note;\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nfirebase.initializeApp({\r\n  apiKey: 'AIzaSyDrASwiPU_HhR2B-EgJPQK6sC2wRTPYZGE',\r\n  authDomain: 'jing-note-e93f3.firebaseapp.com',\r\n  projectId: 'jing-note-e93f3',\r\n  storageBucket: 'jing-note-e93f3.appspot.com',\r\n  messagingSenderId: '632792711831',\r\n  appId: '1:632792711831:web:4c4137224a4a59c17b9fd2',\r\n});\r\n\r\nexport const notesRef = firebase.firestore().collection('/notes');\r\n","import { useEffect, useState } from 'react';\nimport NoteForm from './NoteForm';\nimport Note from './Note';\nimport { notesRef } from '../configs/firebase';\n\nfunction NoteList() {\n  const [notes, setNotes] = useState([]);\n  const [initializing, setInitializing] = useState(false);\n\n  useEffect(() => {\n    setInitializing(true);\n    notesRef.get().then(snapshot => {\n      const notes = [];\n\n      snapshot.forEach(function (childSnapshot) {\n        var id = childSnapshot.id;\n        var data = childSnapshot.data();\n        // ...\n\n        notes.push({\n          id: id,\n          text: data.text,\n          isComplete: data.isComplete,\n        });\n      });\n      setNotes(notes);\n      setInitializing(false);\n    });\n  }, []);\n\n  const addNote = note => {\n    if (!note.text || /^\\s*$/.test(note.text)) return;\n\n    notesRef\n      .add({ ...note, isComplete: false })\n      .then(docRef => {\n        console.log('Tutorial created with ID: ', docRef.id);\n        setNotes([{ ...note, id: docRef.id }, ...notes]);\n      })\n      .catch(error => {\n        console.error('Error adding Tutorial: ', error);\n      });\n  };\n\n  const updateNote = (noteId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) return;\n    setNotes(prev => prev.map(item => (item.id === noteId ? newValue : item)));\n    console.log(newValue);\n    notesRef.doc(noteId).update({\n      text: newValue.text,\n    });\n  };\n\n  const removeNote = id => {\n    setNotes(notes.filter(note => note.id !== id));\n\n    notesRef.doc(id).delete();\n  };\n\n  const completeNote = id => {\n    let updatedNotes = notes.map(note => {\n      if (note.id === id) {\n        note.isComplete = !note.isComplete;\n      }\n      return note;\n    });\n    setNotes(updatedNotes);\n    const n = notes.find(x => x.id === id);\n\n    notesRef.doc(id).update({ isComplete: n.isComplete });\n  };\n\n  return (\n    <>\n      <h1>What's the Plan with Jing?</h1>\n      <NoteForm onSubmit={addNote} />\n      {initializing ? (\n        <h1>Loading...</h1>\n      ) : (\n        <Note\n          notes={notes}\n          completeNote={completeNote}\n          removeNote={removeNote}\n          updateNote={updateNote}\n        />\n      )}\n    </>\n  );\n}\n\nexport default NoteList;\n","import './App.css';\nimport NoteList from './components/NoteList';\n\nfunction App() {\n  return (\n    <div className=\"note-app\">\n      <NoteList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}